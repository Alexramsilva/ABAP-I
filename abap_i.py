# -*- coding: utf-8 -*-
"""ABAP-F.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NBmNSNM5_4DQe-6oFaiK8zMQcqCVAMgh
"""

elif menu == "Módulo de Pólizas":
    st.title("Módulo de Pólizas")

    with st.form("Alta de Póliza"):
        folio = st.text_input("Folio")
        fecha = st.date_input("Fecha")
        concepto = st.text_input("Concepto")

        st.write("### Movimientos")
        movimientos = []
        for i in range(3):
            col1, col2, col3 = st.columns(3)
            cuenta = col1.selectbox(f"Cuenta {i+1}", st.session_state['catalogo_cuentas']['Código'].tolist(), index=None, placeholder="Selecciona una cuenta")
            debe = col2.number_input(f"Debe {i+1}", min_value=0.0, format="%.2f")
            haber = col3.number_input(f"Haber {i+1}", min_value=0.0, format="%.2f")
            movimientos.append((cuenta, debe, haber))

        submit = st.form_submit_button("Agregar Póliza")

        if submit:
            for cuenta, debe, haber in movimientos:
                if cuenta and (debe > 0 or haber > 0):
                    nueva_linea = pd.DataFrame([[folio, fecha, concepto, cuenta, debe, haber]],
                                               columns=['Folio', 'Fecha', 'Concepto', 'Cuenta', 'Debe', 'Haber'])
                    st.session_state['polizas'] = pd.concat([st.session_state['polizas'], nueva_linea], ignore_index=True)
            st.success("Póliza registrada correctamente")

    st.write("### Pólizas Registradas")
    if not st.session_state['polizas'].empty:
        for folio in st.session_state['polizas']['Folio'].unique():
            st.write(f"#### Póliza {folio}")
            df_folio = st.session_state['polizas'][st.session_state['polizas']['Folio'] == folio]
            st.dataframe(df_folio)
            if st.button(f"Eliminar Póliza {folio}", key=folio):
                st.session_state['polizas'] = st.session_state['polizas'][st.session_state['polizas']['Folio'] != folio]
                st.experimental_rerun()