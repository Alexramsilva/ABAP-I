# -*- coding: utf-8 -*-
"""ABAP-I.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O8TE2ZzjmhB2PhvxV3ZIq2J3z2MBwh2F
"""

import streamlit as st
import pandas as pd

# Función para agregar entradas contables
def append_account_entry(account_entries, gl_account, amount, item_text):
    account_entries = account_entries.append({
        'GL Account': gl_account,
        'Amount': amount,
        'Item Text': item_text
    }, ignore_index=True)
    return account_entries

# Título de la app
st.title('Simulador de Registro Contable - SAP')

# Crear una tabla vacía para las entradas contables
account_entries = pd.DataFrame(columns=['GL Account', 'Amount', 'Item Text'])

# Sección para la compra de equipo de cómputo
st.header('1. Compra de equipo de cómputo')

# Ingreso de datos por parte del usuario
amount_computer = st.number_input('Monto de la compra de equipo de cómputo', min_value=1)
if amount_computer:
    account_entries = append_account_entry(account_entries, '1776', amount_computer * 0.16, 'Compra equipo de cómputo (IVA por pagar)')
    account_entries = append_account_entry(account_entries, '123456', amount_computer, 'Compra equipo de cómputo (Activo)')
    account_entries = append_account_entry(account_entries, '200000', -(amount_computer + amount_computer * 0.16), 'Compra equipo de cómputo (a crédito)')

# Sección para la venta de productos
st.header('2. Venta de productos')

# Ingreso de datos por parte del usuario
amount_sale = st.number_input('Monto de la venta de productos', min_value=1)
if amount_sale:
    iva_sale = amount_sale * 0.16
    total_sale = amount_sale + iva_sale
    account_entries = append_account_entry(account_entries, '1180', iva_sale, 'Venta de productos (IVA por cobrar)')
    account_entries = append_account_entry(account_entries, '400000', amount_sale, 'Venta de productos')
    account_entries = append_account_entry(account_entries, '100000', -total_sale, 'Cobro por venta de productos')

# Sección para el pago de sueldos
st.header('3. Pago de sueldos')

# Ingreso de datos por parte del usuario
amount_salaries = st.number_input('Monto del pago de sueldos', min_value=1)
if amount_salaries:
    account_entries = append_account_entry(account_entries, '600000', amount_salaries, 'Pago de sueldos')
    account_entries = append_account_entry(account_entries, '100000', -amount_salaries, 'Pago de sueldos')

# Sección para el pago de renta
st.header('4. Pago de renta')

# Ingreso de datos por parte del usuario
amount_rent = st.number_input('Monto del pago de renta', min_value=1)
if amount_rent:
    account_entries = append_account_entry(account_entries, '650000', amount_rent, 'Pago de renta')
    account_entries = append_account_entry(account_entries, '100000', -amount_rent, 'Pago de renta')

# Sección para la amortización del equipo de cómputo
st.header('5. Amortización del equipo de cómputo')

# Ingreso de datos por parte del usuario
amount_amortization = st.number_input('Monto de la amortización del equipo de cómputo', min_value=1)
if amount_amortization:
    account_entries = append_account_entry(account_entries, '123457', amount_amortization, 'Amortización equipo de cómputo')
    account_entries = append_account_entry(account_entries, '123456', -amount_amortization, 'Amortización equipo de cómputo')

# Mostrar las entradas contables en una tabla
st.subheader('Entradas Contables Registradas')
st.dataframe(account_entries)

# Mostrar la suma total de los montos para verificación
total_amount = account_entries['Amount'].sum()
st.subheader(f'Total de los montos: {total_amount}')